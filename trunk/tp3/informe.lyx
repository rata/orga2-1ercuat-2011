#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Ejercicio 1
\end_layout

\begin_layout Standard
Segmentacion, cambio a modo protegido y preparar pantalla
\end_layout

\begin_layout Standard
La primera tarea consistio en preparar la GDT con los segmentos pedidos.
 Consistía en: 
\end_layout

\begin_layout Itemize
Un segmento de código que ocupe todo el espacio direccionable (4gb).
 
\end_layout

\begin_layout Section*
Ejercicio 2
\end_layout

\begin_layout Standard
(cambiar selector de segmento de macro)
\end_layout

\begin_layout Standard
Que interrupciones agregamos (para que cada cosa)
\end_layout

\begin_layout Standard
Como imprimir texto y registros
\end_layout

\begin_layout Standard
Como Calculamos stack y backtrace.
\end_layout

\begin_layout Section*
Ejercicio 3
\end_layout

\begin_layout Standard
Paginacion: creacion de tablas de directorio y de paginas, habilitar paginacion
\end_layout

\begin_layout Standard
Probar paginacion escribiendo nombre de grupo en pantalla
\end_layout

\begin_layout Section*
Ejercicio 4
\end_layout

\begin_layout Standard
Funciones para administracion de memoria: MMU
\end_layout

\begin_layout Standard
2 variables globales con puntero a las siguientes paginas de usuario/kernel
 libre
\end_layout

\begin_layout Standard
funcion para incializar estas variables
\end_layout

\begin_layout Standard
funciones para obtener páginas libres de usuario/kernel
\end_layout

\begin_layout Standard
Inicializar_dir_usuario hace Identity Mapping entre 0 y 0x2000000
\end_layout

\begin_layout Standard
funciones mapear_pagina y unmapear_pagina
\end_layout

\begin_layout Standard
probar inicializar_dir_usuario escribiendo en pantalla (cambiando cr3)
\end_layout

\begin_layout Section*
Ejercicio 5
\end_layout

\begin_layout Standard
Reconfiguramos PIC para que genere otros numeros de interrupciones (ver
 clase)
\end_layout

\begin_layout Standard
Agregamos entradas a IDT para interrupciones 32, 33, 88, 66 y 89
\end_layout

\begin_layout Standard
handler de interrupcion de reloj para que dibuje el reloj
\end_layout

\begin_layout Standard
Handler de interrupcion teclado con impresion en pantalla usando scancodes
\end_layout

\begin_layout Standard
probamos el resto de las interrupciones modificando eax
\end_layout

\begin_layout Section*
Ejercicio 6
\end_layout

\begin_layout Standard
Para obtener entradas libres en GDT: variable global next_entry, inicializar,
 entradalibre.
\end_layout

\begin_layout Standard
Para completar una tss inicial: obtener_tss_inicial, cargar_tarea_gdt
\end_layout

\begin_layout Standard
Para completar la tarea IDLE usamos obtener_tss_idle.
 Apuntar la pila a la ultima direccion valida de la pagina correspondiente
 (la pila crece restando direcciones).
\end_layout

\begin_layout Standard
Para ejecutar IDLE, primero cargamos el task register con la tarea inicial
 (porque antes de cambiar a la tarea idle, guardara el contexto actual en
 el tss apuntada por el tr), luego hacemos un jmp para cambiar a la tarea
 IDLE.
\end_layout

\begin_layout Section*
Ejercicio 7
\end_layout

\begin_layout Standard
Describir crear proceso.
\end_layout

\begin_layout Standard
Proximo indice devuelve el valor del selector de tss (0x8, 0x10, etc) de
 la proxima tarea a ejecutar.
 Cuando llega a la ultima tarea, vuelve a la primera.
 Esta misma variable se usa para saber cual es la tarea actual que se esta
 ejecutando
\end_layout

\begin_layout Standard
c) Usa el valor de la variable global 
\begin_inset Quotes eld
\end_inset

tarea actual
\begin_inset Quotes erd
\end_inset

 que usar proximo_indice para devolver la siguiente tarea.
\end_layout

\begin_layout Standard
d) se uso una variable selector y offset que se escriben desde la interrupcion
 de reloj con el valor devuelto por proximo_indice.
 despues se hace un jmp far a este selector cambiando así detarea.
\end_layout

\begin_layout Standard
e y f) se creo la variable 
\begin_inset Quotes eld
\end_inset

dormida
\begin_inset Quotes erd
\end_inset

, y funciones que setean 1 o 0 esta variable.
 entonces en la interrupcion de teclado, verificamos la tecla T, y cuando
 es presionada se llama a una de esta funcion que 
\begin_inset Quotes eld
\end_inset

despierta
\begin_inset Quotes erd
\end_inset

 a la tarea control.
 Cuando la variable dormida esta en 0 la tarea control se ejecuta normalmente,
 sino se saltea.
 Cuando ocurre int66 duerme tarea control (cambiando dormida=1) y cambia
 de tarea.
\end_layout

\end_body
\end_document
